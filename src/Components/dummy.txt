{inputBoxCount.map((el, index) => (
              <React.Fragment key={el.ind + index}>
                <Box sx={{ gap: 2 }} className={styles.middle}>
                  <Paper
                    component="form"
                    sx={{
                      p: "2px 10px",
                      display: "flex",
                      alignItems: "center",
                      width: index === 0 ? 300 : 300,
                    }}>
                    <InputBase
                      multiline={false}
                      fullWidth={index === 0 ? false : true}
                      sx={{ ml: index === 0 ? 0 : 1, flex: 1 }}
                      placeholder="Enter URL ex: https://example.com"
                      inputProps={{ "aria-label": "search google maps" }}
                    />
                  </Paper>
                  <Paper
                    component="form"
                    sx={{
                      p: "2px 10px",
                      display: "flex",
                      alignItems: "center",
                      width: index === 0 ? 300 : 300,
                    }}>
                    <MuiChipsInput
                      hideClearAll
                      disableDeleteOnBackspace
                      fullWidth
                      //   multiline
                      size="small"
                      value={chips}
                      onChange={handleChange}
                    />
                  </Paper>

                  {/* <Button
                    variant="contained"
                    endIcon={<KeyIcon />}
                    onClick={handleClose}>
                    Add Key
                  </Button> */}
                  {/* <Button
                    sx={{ display: index === 0 ? "block" : "none" }}
                    size="small"
                    variant="contained"
                    color="primary"
                    onClick={handleAddFields}>
                    <AddIcon />
                  </Button> */}
                </Box>

                {/* <Collapse in={addKeyDropdown}>
                  <Paper variant="outlined" sx={{ bgcolor: "inherit", p: 2 }}>
                    <Box sx={{ display: "flex", justifyContent: "flex-end" }}>
                      <IconButton
                        sx={{ mb: 0.5 }}
                        size="small"
                        onClick={() => setAddKeyDropdown(false)}>
                        <CloseIcon fontSize="small" />
                      </IconButton>
                    </Box>
                    <Box sx={{ width: 250 }}>
                      <MuiChipsInput
                        hideClearAll
                        disableDeleteOnBackspace
                        fullWidth
                        color="primary"
                        multiline
                        size="small"
                        value={chips}
                        onChange={handleChange}
                      />
                    </Box>
                  </Paper>
                </Collapse> */}
              </React.Fragment>
            ))}

            {/* <Button
                    variant="contained"
                    endIcon={<KeyIcon />}
                    onClick={handleClose}>
                    Add Key
                  </Button> */}


                  {/*  Deleted text from view.js linenum : 1271 */}

                  {/* <Box sx={{ border: "1px solid #e1e1e1", minHeight: 100, px: 1 }}>
                  <Stack
                    direction="row"
                    sx={{
                      my: 1.5,
                      display:
                        formatedData?.address?.includes("REDACTED FOR PRIVACY") &&
                        "none",
                    }}>
                    <Typography variant="body2" color="textSecondary">
                      <b>Address :</b> &nbsp;&nbsp;
                    </Typography>
                    {loading.apiCall ? (
                      <Skeleton variant="rectangular" width={150} height={20} />
                    ) : (
                      <Typography variant="body2" color="textSecondary">
                        {formatedData?.address || "Not Available"}
                      </Typography>
                    )}
                  </Stack>
                  <Stack
                    direction="row"
                    sx={{
                      my: 1.5,
                      display:
                        formatedData?.city?.includes("REDACTED FOR PRIVACY") &&
                        "none",
                    }}>
                    <Typography variant="body2" color="textSecondary">
                      <b>City :</b> &nbsp;&nbsp;
                    </Typography>
                    {loading.apiCall ? (
                      <Skeleton variant="rectangular" width={150} height={20} />
                    ) : (
                      <Typography variant="body2" color="textSecondary">
                        {formatedData?.city || "Not Available"}
                      </Typography>
                    )}
                  </Stack>
                  <Stack
                    direction="row"
                    sx={{
                      my: 1.5,
                      display:
                        formatedData?.state?.includes("REDACTED FOR PRIVACY") &&
                        "none",
                    }}>
                    <Typography variant="body2" color="textSecondary">
                      <b>State :</b> &nbsp;&nbsp;
                    </Typography>
                    {loading.apiCall ? (
                      <Skeleton variant="rectangular" width={150} height={20} />
                    ) : (
                      <Typography variant="body2" color="textSecondary">
                        {formatedData?.state || "Not Available"}
                      </Typography>
                    )}
                  </Stack>
                  <Stack
                    direction="row"
                    sx={{
                      my: 1.5,
                      display:
                        formatedData?.country?.includes("REDACTED FOR PRIVACY") &&
                        "none",
                    }}>
                    <Typography variant="body2" color="textSecondary">
                      <b>Country :</b> &nbsp;&nbsp;
                    </Typography>
                    {loading.apiCall ? (
                      <Skeleton variant="rectangular" width={150} height={20} />
                    ) : (
                      <Typography variant="body2" color="textSecondary">
                        {formatedData?.country || "Not Available"}
                      </Typography>
                    )}
                  </Stack>
                  <Stack
                    direction="row"
                    sx={{
                      my: 1.5,
                      display:
                        formatedData?.emails?.includes("REDACTED FOR PRIVACY") &&
                        "none",
                    }}>
                    <Typography variant="body2" color="textSecondary">
                      <b>Email :</b> &nbsp;&nbsp;
                    </Typography>
                    {loading.apiCall ? (
                      <Skeleton variant="rectangular" width={150} height={20} />
                    ) : (
                      <Typography variant="body2" color="textSecondary">
                        {(typeof formatedData?.emails === "object"
                          ? formatedData?.emails?.join(" , ")
                          : formatedData?.emails) || "Not Available"}
                      </Typography>
                    )}
                  </Stack>
                </Box> */}
